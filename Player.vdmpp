-- https://github.com/joaofpereira/feup-mfes/tree/master/mastermind
class Player -- represents the player of the game

types
	public String = seq of char;
	public Key = seq of nat1
	inv k == len k = 4 and forall x in set elems k & (x > 0 and x < 7);
	
instance variables
	private name : String := [];
	private key : Key;
	private numMoves : nat := 0;

operations
	-- default constructor of the player class 
	public Player : () ==> Player
  	Player () == (
  		name := "Default";
  		return self
  	);
  
  -- constructor of the player class with a string parameter
  public Player : String ==> Player
  	Player (playerName) == (
  		name := playerName;
  		return self
  	)
  pre len playerName > 0;
  	
  -- constructor of the player class with a string parameter 
  public Player: String * Key ==> Player
  	Player (playerName, playerKey) == (
  		name := playerName;
  		key := playerKey;
  		return self
  	)
  pre len playerKey = 4 and forall x in set elems playerKey & (x > 0 and x < 7) and len playerName > 0;
  
  -- returns the player's name
  pure public GetName : () ==> String
  	GetName () == (
  		return name;
  	);
  	
  -- returns the player's current key
  pure public GetKey: () ==> Key
  	GetKey () == (
  		return key;
  	);
  
  -- returns player's the number of moves 
  pure public GetNumberOfMoves : () ==> nat
  	GetNumberOfMoves () == (
  		return numMoves;
  	);
  
  -- sets the player's current key to a new one
  public SetKey : Key ==> ()
		SetKey (newKey) == (
			key := newKey;
		)
	pre len newKey = 4 and forall x in set elems newKey & (x > 0 and x < 7);
  	
  -- adds a number of moves to the player's current number of moves 
  public SumMoves : nat ==> ()
  	SumMoves (moves) == (
  		numMoves := numMoves + moves;
  	);
  
  -- returns a random key
  public static GenerateRandomlyKey : () ==> Key
		GenerateRandomlyKey() == (
			dcl randomKey : seq of nat1 := [];
			
			for i = 1 to 4 by 1 do (
				randomKey := randomKey^[MATH`rand(6) + 1];
			);
					
			return randomKey;
		);
		
end Player