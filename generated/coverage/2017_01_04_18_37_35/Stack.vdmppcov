class Stack
        instance variables
                private contents : seq of seq of int := [];
                private capacity:  nat;
                inv len contents <= capacity;
                private tempstck: Stack;
                
        operations
                public Stack: nat ==> Stack
                Stack(c) == (capacity := c; return self)
                post contents = [] and capacity = c;
                public clear: () ==> ()
                clear() == contents := [];
                public push: seq of int ==> ()
                push(x) == contents := [x] ^ contents
                pre len contents < capacity
                post contents = [x] ^ contents~;
                public pop: () ==> ()
                pop() == contents := tl contents
                pre contents <> []
                post contents = tl contents~;
                public top: () ==> seq of int
                top() == return hd contents
                pre contents <> []
                post RESULT = hd contents;
                
                public contains: (seq of int) ==> bool
                contains(coords) == (
                	tempstck := new Stack(capacity);
                	tempstck.setContents(contents);
                	while(tempstck.notEmpty()) do(
                		if(tempstck.top() = coords)
                		then
                		return true
                		else
                		tempstck.pop();
                	);
                	return false;
                );
                
                public setContents: (seq of seq of int) ==> ()
                	setContents(cont) == (
                		contents := cont;
                );
                
                public notEmpty: () ==> bool
                	notEmpty() == (
                	if len contents = 0
                	then
                	return false
                	else
                	return true;
                	);	
                
end Stack