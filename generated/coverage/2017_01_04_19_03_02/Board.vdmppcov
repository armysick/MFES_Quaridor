class Board

types
	public String = seq of char;
instance variables
	private matrix: seq of seq of nat;
	private piece1coords: seq of nat;
	private piece2coords: seq of nat;
	private visited: seq of seq of nat;
	private stck: Stack;
	private path1: bool;
	private path2: bool;
	 
	 
	 
	 inv exists1 line in seq matrix & exists1 elem in seq line & elem = 1; -- Only one "1" player1 piece
	 inv exists1 line in seq matrix & exists1 elem in seq line & elem = 5; -- Only one "5" player2 piece
	 inv forall x,y in seq [2,4,6,8,10,12,14,16] & matrix(x)(y)=4;
operations

	-- Empty spot: 0
	-- Spot with piece player1: 1
	-- No wall: 2
	-- Yes wall: 3 
	-- Null space: 4
	-- Spot with piece player2: 5
	-- matrix(row)(col)
	public Board: () ==> Board
	  	Board () == (
	  	matrix := 
	    [
	    [0,2,0,2,0,2,0,2,1,2,0,2,0,2,0,2,0],
	    [2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2],
	    [0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0],
	    [2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2],
	  	[0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0],
	  	[2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2],
	  	[0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0],
	  	[2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2],
	  	[0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0],
	  	[2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2],
	  	[0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0],
	  	[2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2],
	  	[0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0],
	  	[2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2],
	  	[0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0],
	  	[2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2],
	  	[0,2,0,2,0,2,0,2,5,2,0,2,0,2,0,2,0]
	  	];
	  	
	  	piece1coords := [1,9];
	  	piece2coords := [17,9];
	  	);
	  	
	  	public Board: seq of seq of nat ==> Board
	  	Board (mateste) == (
	  	matrix := mateste;
	  	
	  	piece1coords := [1,9];
	  	piece2coords := [17,9];
	  	);
	  	
	  	public placeWall: seq of nat * seq of nat ==> ()  
	  		placeWall(coords1, coords2) == (
	  		matrix(coords1(1))(coords1(2)) := 3;
	  		matrix(coords2(1))(coords2(2)) := 3; 
	  		path1:=true;
	  		stck := new Stack(10000);
	  		testPathExistance1(piece1coords);
	  		path2:=true;
	  		stck := new Stack(10000);
	  		-- testPathExistance2(piece2coords);
	  		)
	  		pre coords1(1)>0 and coords1(2)> 0 and coords1(1)<= 17 and coords1(2)<=17
	  		and coords2(1)>0 and coords2(2)> 0 and coords2(1)<= 17 and coords2(2)<=17
	  		-- weakest precondition on bounds TODO: Tem que passar por um 4.
	  		and (
	  		(coords1(1) = coords2(1) and abs(coords1(2) - coords2(2)) = 2)
	  		or
	  		(abs(coords1(1) - coords2(1)) = 2 and coords1(2) = coords2(2))
	  		)	  		
	  		-- Guarantee they are adjacent wall slots;
	  		and matrix(coords1(1))(coords1(2)) = 2 and matrix(coords2(1))(coords2(2)) = 2
	  		-- only change changeable places
	  		
	  		
	  		post path1 and path2;
	  		
	  	
	  	public testPathExistance1: (seq of int) ==> () -- TODO start coords = player coords; Player1
	  		testPathExistance1(coords) == (
	  			if coords(1) = 17
	  				then
	  					path1:=true
	  			else
	  				stck.push(coords);
	  				if coords(1) + 2 < 18
	  				then(
	  					if matrix(coords(1)+1)(coords(2)) = 2 and not stck.contains([coords(1)+2,coords(2)])
	  					then
	  						testPathExistance1([coords(1)+2, coords(2)])
	  				);
	  				
	  				if coords(2) + 2 < 18
	  				then(
	  					if matrix(coords(1))(coords(2)+1) = 2 and not stck.contains([coords(1),coords(2)+2])
	  					then
	  						testPathExistance1([coords(1), coords(2)+2]);
	  				);
	  				
	  				
	  		);
	  	
	  	public testPathExistance2: (seq of int) ==> () -- TODO start coords = player coords; Player2
	  		testPathExistance2(coords) == (
	  			if coords(1) = 1
	  				then
	  					path2:=true
	  			else
	  				stck.push(coords);
	  				if coords(1) - 2 > 0
	  				then(
	  					if matrix(coords(1)-1)(coords(2)) = 2 and not stck.contains([coords(1)-2,coords(2)])
	  					then
	  						testPathExistance2([coords(1)-2, coords(2)]);
	  				); 
	  				if coords(2) - 2 > 0 
	  				then(
	  					if matrix(coords(1))(coords(2)-1) = 2 and not stck.contains([coords(1),coords(2)-2])
	  					then
	  						testPathExistance2([coords(1), coords(2)-2]);
	  				);
	  				if coords(2) + 2 < 18
	  				then(
	  					if matrix(coords(1))(coords(2)+1) = 2 and not stck.contains([coords(1),coords(2)+2])
	  					then
	  						testPathExistance2([coords(1), coords(2)+2]);
	  				);
	  				if coords(1) + 2 < 18
	  				then(
	  					if matrix(coords(1)+1)(coords(2)) = 2 and not stck.contains([coords(1)+2,coords(2)])
	  					then
	  						testPathExistance2([coords(1)+2, coords(2)])
	  				);
	  				
	  		);
	  	
	  	public movePiece: String * nat==> ()
	  		movePiece(direction, nrjogador) == (
	  		if nrjogador = 1
		  		then (
		  			if direction = "N"
		  				then
		  					(
		  						matrix(piece1coords(1))(piece1coords(2)) := 0;
		  						matrix(piece1coords(1) - 2)(piece1coords(2)) := 1;
		  						piece1coords(1) := piece1coords(1) - 2;
		  					)
		  			elseif direction = "O"
		  					then
		  					(
		  						matrix(piece1coords(1))(piece1coords(2)) := 0;
		  						matrix(piece1coords(1))(piece1coords(2)-2) := 1;
		  						piece1coords(2) := piece1coords(2) - 2;
		  					)
		  			elseif direction = "S"
		  					then
		  					(
		  						matrix(piece1coords(1))(piece1coords(2)) := 0;
		  						matrix(piece1coords(1) +2)(piece1coords(2)) := 1;
		  						piece1coords(1) := piece1coords(1) + 2;
		  					)
		  			elseif direction = "E"
		  					then
		  					(
		  						matrix(piece1coords(1))(piece1coords(2)) := 0;
		  						matrix(piece1coords(1))(piece1coords(2)+2) := 1;
		  						piece1coords(2) := piece1coords(2) + 2;
		  					)
		  		)
		  	elseif nrjogador = 2
		  	then (
		  			if direction = "N"
		  				then
		  					(
		  						matrix(piece2coords(1))(piece2coords(2)) := 0;
		  						matrix(piece2coords(1) - 2)(piece2coords(2)) := 1;
		  						piece2coords(1) := piece2coords(1) - 2;
		  					)
		  			elseif direction = "O"
		  					then
		  					(
		  						matrix(piece2coords(1))(piece2coords(2)) := 0;
		  						matrix(piece2coords(1))(piece2coords(2)-2) := 1;
		  						piece2coords(2) := piece2coords(2) - 2;
		  					)
		  			elseif direction = "S"
		  					then
		  					(
		  						matrix(piece2coords(1))(piece2coords(2)) := 0;
		  						matrix(piece2coords(1) +2)(piece2coords(2)) := 1;
		  						piece2coords(1) := piece2coords(1) + 2;
		  					)
		  			elseif direction = "E"
		  					then
		  					(
		  						matrix(piece2coords(1))(piece2coords(2)) := 0;
		  						matrix(piece2coords(1))(piece2coords(2)+2) := 1;
		  						piece2coords(2) := piece2coords(2) + 2;
		  					)
		  		)
	  		)
	  		pre (direction = "N" or direction = "O" or direction= "S" or direction = "E") -- North, Oeste, etc
	  		and checkPlayerOOB(direction,nrjogador) -- Jogador não sai do tabuleiro
	  		and (nrjogador = 1 or nrjogador = 2) --Identificador válido de jogador
	  		;-- TODO post testPathExistance(); 
	  		 
	  		
	  		pure public checkPlayerOOB: String * nat ==> bool
	  			checkPlayerOOB(direction, nrjogador) == (
	  			if nrjogador = 1
		  		then (
		  			if direction = "N"
		  				then
		  					(
		  					if piece1coords(1) - 2 < 0
		  						then(
		  							return false;
		  							)
		  						
		  					)
		  			elseif direction = "O"
		  					then
		  					(
		  						if piece1coords(2)-2 < 0
		  							then(
		  								return false;
		  							)
		  					)
		  			elseif direction = "S"
		  					then
		  					(
			  					if piece1coords(1)+2 > 17
			  							then(
			  								return false;
			  							)

		  					)
		  			elseif direction = "E"
		  					then
		  					(
		  						if piece1coords(2)+2 > 17
		  							then(
		  								return false;
		  							)
		  						
		  					)
		  					
		  					
		  		)
		  	elseif nrjogador = 2
		  	then (
		  			if direction = "N"
		  				then
		  					(
		  					if piece2coords(1) - 2 < 0
		  						then(
		  							return false;
		  							)
		  						
		  					)
		  			elseif direction = "O"
		  					then
		  					(
		  						if piece2coords(2)-2 < 0
		  							then(
		  								return false;
		  							)
		  					)
		  			elseif direction = "S"
		  					then
		  					(
			  					if piece2coords(1)+2 > 17
			  							then(
			  								return false;
			  							)

		  					)
		  			elseif direction = "E"
		  					then
		  					(
		  						if piece2coords(2)+2 > 17
		  							then(
		  								return false;
		  							)
		  						
		  					)
		  		);
		  		return true;
	  			);
	  		 
	  	public getMatrix: () ==> seq of seq of nat
	  		getMatrix() == (
	  		return matrix;
	  		);
	  		
	  		
end Board