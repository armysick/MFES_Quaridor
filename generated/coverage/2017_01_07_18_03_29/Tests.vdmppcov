class Tests is subclass of MyTestCase
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
-- TODO Define instance variables here
operations
public testBadMatrix : () ==> ()
	testBadMatrix() == (
		dcl mat : seq of seq of nat := 
	    [
	    [0,2,0,2,0,2,0,2,1,2,0,2,0,2,0,2,0],
	    [2,2,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2],
	    [0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0],
	    [2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2],
	  	[0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0],
	  	[2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2],
	  	[0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0],
	  	[2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2],
	  	[0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0],
	  	[2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2],
	  	[0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0],
	  	[2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2],
	  	[0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0],
	  	[2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2],
	  	[0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0],
	  	[2,4,2,4,2,4,2,4,2,4,2,4,2,4,2,4,2],
	  	[0,2,0,2,0,2,0,2,5,2,0,2,0,2,0,2,0]
	  	];
	  	dcl b2 : Board := new Board();
	  	dcl b : Board := new Board(mat); -- Supposed to be error
	  	assertEqual(1, b2.getMatrix()(1)(2));
	);
	
	public testGoodMatrix : () ==> ()
	testGoodMatrix() == (
	  	dcl b2 : Board := new Board();
	  	assertEqual(1, b2.getMatrix()(1)(9));
	);

	public invalidDirectionMoving : () ==> ()
	invalidDirectionMoving() == (
		dcl b: Board := new Board();
		b.movePiece("U",1);
	);
	
	public invalidWallPlacement : () ==> ()
	invalidWallPlacement() == (
		dcl p1: Player := new Player(0);
		dcl p2: Player := new Player(0);
		dcl game: Game := new Game(p1, p2);
		game.placeWall([1,2],[1,4]);
	);
	
	public emptyWallStack : () ==> ()
	emptyWallStack() == (
		dcl b: Board := new Board();
		dcl p1: Player := new Player(0);
		dcl p2: Player := new Player(0);
		dcl game: Game := new Game(p1, p2);
		game.placeWall([1,2],[3,2]);
	);
	
	public invalidPieceMovementAfterGameEnd : () ==> ()
		invalidPieceMovementAfterGameEnd() == (
			dcl p1: Player := new Player();
			dcl p2: Player := new Player();
			dcl game: Game := new Game(p1, p2);
			game.setGameState(1);
			game.movePiece("N");
		);
	
	public removeFromStack : () ==> ()
		removeFromStack() == (
			dcl p: Player := new Player();
			p.RemoveFromStack();
			assertEqual(9, p.GetNumberOfWallsOnStack());
		);
	
	public validMovement : () ==> ()
	validMovement() == (
	dcl p1: Player := new Player(0);
	dcl p2: Player := new Player(0);
	dcl game: Game := new Game(p1, p2);
	game.movePiece("S");
	assertEqual(game.getBoard().getMatrix()(3)(9), 1);
	);
	
	public validWallPlacement : () ==> ()
		validWallPlacement() == (
			dcl p1: Player := new Player();
			dcl p2: Player := new Player();
			dcl game: Game := new Game(p1, p2);
			game.placeWall([1,2],[3,2]);
			assertEqual(game.getBoard().getMatrix()(1)(2), 3);
		);
	
	public testAll: () ==> ()
  testAll() == (
 	  --invalidDirectionMoving();
  	--testBadMatrix();
  	--invalidPieceMovementAfterGameEnd();
  	--emptyWallStack();
  	--invalidWallPlacement();
  	-- Tests that intentionally break;
  	
  	removeFromStack();
  	validMovement();
  	validWallPlacement();
  	testGoodMatrix();
  );
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Tests